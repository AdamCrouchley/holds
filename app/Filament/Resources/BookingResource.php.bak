<?php

namespace App\Filament\Resources;

use App\Filament\Resources\BookingResource\Pages;
use App\Filament\Resources\BookingResource\RelationManagers\PaymentsRelationManager;
use App\Filament\Resources\BookingResource\RelationManagers\DepositsRelationManager;
use App\Models\Booking;
use App\Models\Payment;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Infolists\Components\Section;
use Filament\Infolists\Components\Tabs;
use Filament\Infolists\Components\Tabs\Tab;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Facades\Schema;
use Stripe\StripeClient;

class BookingResource extends Resource
{
    protected static ?string $model = Booking::class;

    protected static ?string $navigationIcon  = 'heroicon-o-clipboard-document-check';
    protected static ?string $navigationGroup = 'Bookings';
    protected static ?string $navigationLabel = 'Bookings';

    /**
     * Ensure the list view only eager-loads relations we can guarantee exist.
     */
    public static function getEloquentQuery(): Builder
    {
        $q = parent::getEloquentQuery()
            ->with(['customer', 'payments']);

        if (class_exists(\App\Models\Vehicle::class)) {
            $q->with('vehicle');
        }

        if (Schema::hasTable('deposits') && Schema::hasColumn('deposits', 'booking_id')) {
            $q->with('deposits');
        }

        return $q;
    }

    /** Helper: "deposit paid so far" in integer cents. */
    protected static function depositPaidCents(Booking $record): int
    {
        return (int) $record->deposit_paid;
    }

    public static function form(Form $form): Form
    {
        $formatAsDollars = fn (?int $cents) => number_format(((int)($cents ?? 0)) / 100, 2, '.', '');
        $dehydrateAsCents = fn ($state) => (int) round(((float) ($state ?? 0)) * 100);

        return $form->schema([
            Forms\Components\TextInput::make('reference')
                ->label('Reference')
                ->required()
                ->maxLength(255),

            Forms\Components\Select::make('customer_id')
                ->label('Customer')
                ->relationship('customer', 'email')
                ->searchable()
                ->preload()
                ->required(),

            Forms\Components\TextInput::make('vehicle')
                ->label('Vehicle (label)')
                ->maxLength(255),

            Forms\Components\DateTimePicker::make('start_at')
                ->label('Start')
                ->seconds(false)
                ->required(),

            Forms\Components\DateTimePicker::make('end_at')
                ->label('End')
                ->seconds(false)
                ->required(),

            Forms\Components\TextInput::make('deposit_amount')
                ->label('Deposit Required (NZD)')
                ->numeric()
                ->step('0.01')
                ->formatStateUsing(fn ($state) => $formatAsDollars($state))
                ->dehydrateStateUsing(fn ($state) => $dehydrateAsCents($state))
                ->required(),

            Forms\Components\TextInput::make('total_amount')
                ->label('Total (NZD)')
                ->numeric()
                ->step('0.01')
                ->formatStateUsing(fn ($state) => $formatAsDollars($state))
                ->dehydrateStateUsing(fn ($state) => $dehydrateAsCents($state))
                ->required(),

            Forms\Components\TextInput::make('hold_amount')
                ->label('Security Hold (NZD)')
                ->numeric()
                ->step('0.01')
                ->formatStateUsing(fn ($state) => $formatAsDollars($state))
                ->dehydrateStateUsing(fn ($state) => $dehydrateAsCents($state)),

            Forms\Components\TextInput::make('currency')
                ->label('Currency')
                ->default('NZD')
                ->maxLength(8),

            Forms\Components\Select::make('status')
                ->label('Status')
                ->options([
                    'pending'   => 'Pending',
                    'paid'      => 'Paid',
                    'cancelled' => 'Cancelled',
                ])
                ->default('pending')
                ->required(),
        ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->defaultSort('start_at', 'desc')
            ->columns([
                Tables\Columns\TextColumn::make('reference')
                    ->label('Ref')
                    ->searchable()
                    ->sortable(),

                Tables\Columns\TextColumn::make('customer_real_name')
                    ->label('Customer')
                    ->state(fn (Booking $r) => $r->customer_real_name ?: '—')
                    ->searchable(
                        query: function (Builder $query, string $search) {
                            $query->whereHas('customer', function (Builder $q) use ($search) {
                                $q->where('first_name', 'like', "%{$search}%")
                                  ->orWhere('last_name',  'like', "%{$search}%")
                                  ->orWhere('email',      'like', "%{$search}%");
                            });
                        }
                    )
                    ->sortable(),

                Tables\Columns\TextColumn::make('car_label')
                    ->label('Vehicle')
                    ->state(fn (Booking $r) => $r->car_label ?: '—')
                    ->searchable()
                    ->sortable(),

                Tables\Columns\TextColumn::make('start_at')
                    ->label('Start')
                    ->dateTime('Y-m-d H:i')
                    ->sortable(),

                Tables\Columns\TextColumn::make('end_at')
                    ->label('End')
                    ->dateTime('Y-m-d H:i')
                    ->sortable(),

                Tables\Columns\TextColumn::make('deposit_amount')
                    ->label('Deposit Required')
                    ->state(fn (Booking $r) => (int) ($r->deposit_amount ?? 0))
                    ->money('nzd', divideBy: 100)
                    ->sortable(),

                Tables\Columns\TextColumn::make('deposit_paid')
                    ->label('Deposit Paid')
                    ->state(fn (Booking $r) => static::depositPaidCents($r))
                    ->money('nzd', divideBy: 100)
                    ->sortable()
                    ->color(function (Booking $r) {
                        $req  = (int) ($r->deposit_amount ?? 0);
                        $paid = (int) static::depositPaidCents($r);
                        return $req > 0 && $paid >= $req ? 'success' : ($req > 0 ? 'warning' : null);
                    }),

                Tables\Columns\TextColumn::make('amount_paid')
                    ->label('Paid So Far')
                    ->state(fn (Booking $r) => (int) ($r->payments
                        ? $r->payments->whereIn('status', ['succeeded', 'paid', 'captured', 'completed'])->sum('amount')
                        : 0))
                    ->money('nzd', divideBy: 100)
                    ->sortable(),

                Tables\Columns\TextColumn::make('balance_due')
                    ->label('Balance Due')
                    ->state(function (Booking $r) {
                        $total = (int) ($r->total_amount ?? 0);
                        $paid  = (int) ($r->payments
                            ? $r->payments->whereIn('status', ['succeeded', 'paid', 'captured', 'completed'])->sum('amount')
                            : 0);
                        return max(0, $total - $paid);
                    })
                    ->money('nzd', divideBy: 100)
                    ->sortable(),

                Tables\Columns\BadgeColumn::make('deposit_status')
                    ->label('Deposit Status')
                    ->state(function (Booking $r) {
                        $req  = (int) ($r->deposit_amount ?? 0);
                        $paid = (int) static::depositPaidCents($r);
                        if ($req <= 0) return 'n/a';
                        return $paid >= $req ? 'Paid' : 'Partial';
                    })
                    ->colors([
                        'secondary' => 'n/a',
                        'success'   => 'Paid',
                        'warning'   => 'Partial',
                    ]),

                Tables\Columns\BadgeColumn::make('status')
                    ->label('Status')
                    ->colors([
                        'warning' => 'pending',
                        'success' => 'paid',
                        'danger'  => 'cancelled',
                    ])
                    ->sortable(),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('status')
                    ->label('Status')
                    ->options([
                        'pending'   => 'Pending',
                        'paid'      => 'Paid',
                        'cancelled' => 'Cancelled',
                    ]),
                Tables\Filters\Filter::make('upcoming')
                    ->label('Upcoming')
                    ->query(fn ($q) => $q->where('start_at', '>=', now())),
                Tables\Filters\Filter::make('active')
                    ->label('Active (in progress)')
                    ->query(fn ($q) => $q->where('start_at', '<=', now())->where('end_at', '>=', now())),
                Tables\Filters\Filter::make('past')
                    ->label('Past')
                    ->query(fn ($q) => $q->where('end_at', '<', now())),
            ])
            ->actions([
                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),

                // existing Add Deposit row action...
                Tables\Actions\Action::make('addManualDeposit')
                    ->label('Add Deposit Paid')
                    ->icon('heroicon-o-banknotes')
                    ->form([
                        Forms\Components\TextInput::make('amount_nzd')
                            ->label('Amount (NZD)')
                            ->numeric()
                            ->step('0.01')
                            ->required(),
                        Forms\Components\Select::make('status')
                            ->label('Status')
                            ->default('completed')
                            ->options([
                                'completed' => 'Completed',
                                'paid'      => 'Paid',
                                'succeeded' => 'Succeeded',
                                'captured'  => 'Captured',
                            ]),
                        Forms\Components\TextInput::make('note')
                            ->label('Note')
                            ->maxLength(255),
                    ])
                    ->action(function (array $data, Booking $record) {
                        $amountCents = (int) round(((float) $data['amount_nzd']) * 100);

                        $p = new Payment();
                        if (Schema::hasColumn('payments', 'booking_id')) {
                            $p->booking_id = $record->id;
                        } elseif (Schema::hasColumn('payments', 'booking_reference')) {
                            $p->booking_reference = $record->reference;
                        }

                        $purposeCol = Schema::hasColumn('payments', 'purpose') ? 'purpose' : (Schema::hasColumn('payments', 'type') ? 'type' : null);
                        if ($purposeCol) {
                            $p->{$purposeCol} = 'deposit';
                        }

                        $p->amount = $amountCents;

                        if (Schema::hasColumn('payments', 'status')) {
                            $p->status = $data['status'] ?? 'completed';
                        }

                        if (Schema::hasColumn('payments', 'note') && !empty($data['note'])) {
                            $p->note = $data['note'];
                        }

                        $p->save();
                    })
                    ->visible(fn () => Schema::hasTable('payments') && Schema::hasColumn('payments', 'amount')),

                // existing Capture Bond / Post-hire Charge row actions remain (not repeated here to keep file concise)
                // ... (keep the versions you already pasted in last step)

                Tables\Actions\Action::make('openPortal')
                    ->label('Open Portal')
                    ->icon('heroicon-o-arrow-top-right-on-square')
                    ->url(fn (Booking $r) => $r->portal_token ? route('portal.pay', ['token' => $r->portal_token]) : null)
                    ->visible(fn (Booking $r) => !empty($r->portal_token))
                    ->openUrlInNewTab(),

                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist->schema([
            Tabs::make('BookingTabs')
                ->tabs([
                    Tab::make('Overview')
                        ->schema([
                            Section::make('Booking')
                                ->columns(3)
                                ->schema([
                                    TextEntry::make('reference')->label('Reference'),

                                    TextEntry::make('status')
                                        ->badge()
                                        ->colors([
                                            'warning' => 'pending',
                                            'success' => 'paid',
                                            'danger'  => 'cancelled',
                                        ])
                                        ->label('Status'),

                                    TextEntry::make('car_label')
                                        ->label('Vehicle')
                                        ->state(fn (Booking $r) => $r->car_label ?: '—'),

                                    TextEntry::make('start_at')->label('Start')->dateTime('Y-m-d H:i'),
                                    TextEntry::make('end_at')->label('End')->dateTime('Y-m-d H:i'),

                                    TextEntry::make('customer_real_name')
                                        ->label('Customer')
                                        ->state(fn (Booking $r) => $r->customer_real_name ?: '—'),
                                ]),

                            Section::make('Money')
                                ->columns(3)
                                ->schema([
                                    TextEntry::make('total_amount')
                                        ->label('Total Amount')
                                        ->state(fn (Booking $r) => (int) ($r->total_amount ?? 0))
                                        ->money('nzd', divideBy: 100),

                                    TextEntry::make('deposit_amount')
                                        ->label('Deposit Required')
                                        ->state(fn (Booking $r) => (int) ($r->deposit_amount ?? 0))
                                        ->money('nzd', divideBy: 100),

                                    TextEntry::make('deposit_paid')
                                        ->label('Deposit Paid')
                                        ->state(fn (Booking $r) => (int) static::depositPaidCents($r))
                                        ->money('nzd', divideBy: 100),

                                    TextEntry::make('deposit_due')
                                        ->label('Deposit Outstanding')
                                        ->state(fn (Booking $r) => max((int) ($r->deposit_amount ?? 0) - (int) static::depositPaidCents($r), 0))
                                        ->money('nzd', divideBy: 100),

                                    TextEntry::make('amount_paid')
                                        ->label('Paid So Far')
                                        ->state(fn (Booking $r) => (int) ($r->payments
                                            ? $r->payments->whereIn('status', ['succeeded', 'paid', 'captured', 'completed'])->sum('amount')
                                            : 0))
                                        ->money('nzd', divideBy: 100),

                                    TextEntry::make('balance_due')
                                        ->label('Balance Due')
                                        ->state(function (Booking $r) {
                                            $total = (int) ($r->total_amount ?? 0);
                                            $paid  = (int) ($r->payments
                                                ? $r->payments->whereIn('status', ['succeeded', 'paid', 'captured', 'completed'])->sum('amount')
                                                : 0);
                                            return max(0, $total - $paid);
                                        })
                                        ->money('nzd', divideBy: 100),

                                    TextEntry::make('hold_amount')
                                        ->label('Security Hold')
                                        ->state(fn (Booking $r) => (int) ($r->hold_amount ?? 0))
                                        ->money('nzd', divideBy: 100),

                                    TextEntry::make('currency')->label('Currency')->default('NZD'),
                                ]),
                        ]),

                    Tab::make('Customer')
                        ->schema([
                            Section::make('Customer')
                                ->columns(3)
                                ->schema([
                                    TextEntry::make('customer_name')
                                        ->label('Name')
                                        ->state(fn (Booking $r) =>
                                            $r->customer?->name
                                            ?? trim(($r->first_name ?? '').' '.($r->last_name ?? ''))
                                            ?: '—'
                                        ),

                                    TextEntry::make('customer_email')
                                        ->label('Email')
                                        ->state(fn (Booking $r) =>
                                            $r->customer?->email
                                            ?? $r->customer_email
                                            ?? '—'
                                        )
                                        ->url(fn (Booking $r) =>
                                            $r->customer?->email
                                                ? 'mailto:'.$r->customer->email
                                                : ($r->customer_email ? 'mailto:'.$r->customer_email : null),
                                            true
                                        ),

                                    TextEntry::make('customer_phone')
                                        ->label('Phone')
                                        ->state(fn (Booking $r) =>
                                            $r->customer?->phone
                                            ?? $r->customer_phone
                                            ?? '—'
                                        )
                                        ->url(fn (Booking $r) =>
                                            $r->customer?->phone
                                                ? 'tel:'.preg_replace('/\s+/', '', $r->customer->phone)
                                                : ($r->customer_phone ? 'tel:'.preg_replace('/\s+/', '', $r->customer_phone) : null),
                                            true
                                        ),

                                    TextEntry::make('customer_address')
                                        ->label('Address')
                                        ->columnSpan(3)
                                        ->state(function (Booking $r) {
                                            $c = $r->customer;
                                            $addrL1  = $c?->address_line1 ?? $r->address_line1 ?? null;
                                            $addrL2  = $c?->address_line2 ?? $r->address_line2 ?? null;
                                            $addrCity= $c?->address_city  ?? $r->address_city  ?? null;
                                            $addrReg = $c?->address_region?? $r->address_region?? null;
                                            $addrPC  = $c?->address_postcode ?? $r->address_postcode ?? null;
                                            $addrCtr = $c?->address_country ?? $r->address_country ?? null;

                                            $parts = array_filter([$addrL1, $addrL2, $addrCity, $addrReg, $addrPC, $addrCtr]);
                                            return $parts ? implode(', ', $parts) : '—';
                                        }),

                                    TextEntry::make('drivers_license_number')
                                        ->label('Driver’s licence #')
                                        ->state(fn (Booking $r) =>
                                            $r->customer->drivers_license_number
                                                ?? $r->drivers_license_number
                                                ?? '—'
                                        ),

                                    TextEntry::make('drivers_license_country')
                                        ->label('Issuing country')
                                        ->state(fn (Booking $r) =>
                                            $r->customer->drivers_license_country
                                                ?? $r->drivers_license_country
                                                ?? '—'
                                        ),

                                    TextEntry::make('drivers_license_expiry')
                                        ->label('Licence expiry')
                                        ->state(fn (Booking $r) => (function () use ($r) {
                                            $raw = $r->customer->drivers_license_expiry
                                                ?? $r->drivers_license_expiry
                                                ?? null;
                                            if (!$raw) return '—';
                                            try { return \Illuminate\Support\Carbon::parse($raw)->format('d M Y'); }
                                            catch (\Throwable) { return (string) $raw; }
                                        })()),

                                    TextEntry::make('date_of_birth')
                                        ->label('Date of birth')
                                        ->state(fn (Booking $r) => (function () use ($r) {
                                            $raw = $r->customer->date_of_birth
                                                ?? $r->date_of_birth
                                                ?? null;
                                            if (!$raw) return '—';
                                            try { return \Illuminate\Support\Carbon::parse($raw)->format('d M Y'); }
                                            catch (\Throwable) { return (string) $raw; }
                                        })()),
                                ]),
                        ]),

                    Tab::make('Links')
                        ->schema([
                            Section::make('Links')
                                ->columns(1)
                                ->schema([
                                    TextEntry::make('portal_url')
                                        ->label('Customer Portal')
                                        ->state(fn (Booking $r) => $r->portal_token
                                            ? route('portal.pay', ['token' => $r->portal_token])
                                            : '—')
                                        ->copyable()
                                        ->copyMessage('Portal URL copied'),
                                ]),
                        ]),
                ]),
        ]);
    }

    public static function getRelations(): array
    {
        return [
            PaymentsRelationManager::class,
            DepositsRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index'  => Pages\ListBookings::route('/'),
            'create' => Pages\CreateBooking::route('/create'),
            'view'   => Pages\ViewBooking::route('/{record}'),
            'edit'   => Pages\EditBooking::route('/{record}/edit'),
        ];
    }
}
