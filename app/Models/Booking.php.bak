<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;
use Illuminate\Database\Eloquent\Builder;

class Booking extends Model
{
    use HasFactory;

    protected $fillable = [
        'customer_id',
        'vehicle_id',
        'vehicle', // fallback string label
        'reference',
        'status',
        'start_at',
        'end_at',
        'total_amount',
        'deposit_amount',
        'hold_amount',
        'currency',
        'portal_token',
        'stripe_payment_intent_id',
        'meta',
    ];

    protected $casts = [
        'start_at'       => 'datetime',
        'end_at'         => 'datetime',
        'total_amount'   => 'integer',
        'deposit_amount' => 'integer',
        'hold_amount'    => 'integer',
        'meta'           => 'array',
    ];

    /**
     * Always eager-load customer.
     * Vehicle is added conditionally in the constructor if the class exists.
     */
    protected $with = ['customer'];

    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);

        // Only eager-load vehicle if the model exists
        if (class_exists(\App\Models\Vehicle::class)) {
            $this->with = array_values(array_unique(array_merge($this->with, ['vehicle'])));
        }
    }

    protected $appends = [
        'portal_url',
        'total_formatted',
        'deposit_formatted',
        'hold_formatted',
        'amount_paid_formatted',
        'balance_due_formatted',
        'deposit_paid_formatted',
        'deposit_due_formatted',
        'deposit_paid_so_far_formatted',
        'customer_name',
        'customer_real_name',
        'car_label',
    ];

    protected static function booted(): void
    {
        static::creating(function (self $booking) {
            if (empty($booking->reference)) {
                do {
                    $candidate = 'BK-' . now()->format('ymdHis') . '-' . Str::upper(Str::random(3));
                } while (self::where('reference', $candidate)->exists());
                $booking->reference = $candidate;
            }

            if (empty($booking->portal_token)) {
                $booking->portal_token = Str::random(40);
            }

            if (empty($booking->currency)) {
                $booking->currency = 'NZD';
            }
        });
    }

    // ---------------- Relationships ----------------

    public function customer()
    {
        return $this->belongsTo(Customer::class);
    }

    public function payments()
    {
        return $this->hasMany(Payment::class);
    }

    /**
     * Deposits relation (as requested).
     * Prefer proper FK booking_id; fall back to legacy booking_reference.
     */
    public function deposits()
    {
        if (Schema::hasTable('deposits') && Schema::hasColumn('deposits', 'booking_id')) {
            return $this->hasMany(\App\Models\Deposit::class, 'booking_id', 'id');
        }
        // fallback while rolling out
        return $this->hasMany(\App\Models\Deposit::class, 'booking_reference', 'reference');
    }

    /**
     * Vehicle relation is optional. Do NOT call this if you don't have a Vehicle model.
     * We avoid eager-loading it unless the class exists (see constructor).
     */
    public function vehicle()
    {
        if (!class_exists(\App\Models\Vehicle::class)) {
            return null;
        }

        return $this->belongsTo(\App\Models\Vehicle::class);
    }

    // ---------------- Accessors / Labels ----------------

    public function getCustomerNameAttribute(): string
    {
        $first = trim((string) data_get($this->customer, 'first_name', ''));
        $last  = trim((string) data_get($this->customer, 'last_name', ''));
        $full  = trim($first . ' ' . $last);
        if ($full !== '') return $full;

        return trim((string) data_get($this->meta, 'customer.name', ''));
    }

    public function getCustomerRealNameAttribute(): string
    {
        $fullFromModel = trim((string) data_get($this->customer, 'full_name', ''));
        if ($fullFromModel !== '') return $fullFromModel;

        $basic = $this->customer_name;
        if ($basic !== '') return $basic;

        $email = (string) data_get($this->customer, 'email', '');
        return $email ?: '';
    }

    /**
     * Human label for the car being hired.
     * Uses related Vehicle if available, otherwise falls back to the string column.
     */
    public function getCarLabelAttribute(): string
    {
        if (class_exists(\App\Models\Vehicle::class) && $this->relationLoaded('vehicle') && $this->vehicle) {
            $v = $this->vehicle;
            $display = trim((string) data_get($v, 'display_name', ''));
            if ($display !== '') return $display;

            $parts = array_filter([
                trim((string) data_get($v, 'make', '')),
                trim((string) data_get($v, 'model', '')),
            ]);
            $label = trim(implode(' ', $parts));

            $plate = trim((string) data_get($v, 'plate', ''));
            if ($plate !== '') {
                $label = $label !== '' ? ($label . ' • ' . $plate) : $plate;
            }

            if ($label !== '') return $label;
        }

        // Fallback to imported string column
        return (string) ($this->vehicle ?? '');
    }

    // ---------------- Money (raw cents) ----------------

    public function getAmountPaidAttribute(): int
    {
        return $this->sumCentsFrom('payments', 'amount', $this->paidStatuses());
    }

    /**
     * Sum deposit cents paid — schema-proof (never references a missing column).
     * Replaced with your requested implementation that checks deposits.amount exists.
     */
    public function getDepositPaidAttribute(): int
    {
        $sum = 0;

        // ---- deposits table (only if it actually has the needed columns) ----
        if (
            \Schema::hasTable('deposits') &&
            \Schema::hasColumn('deposits', 'booking_id') &&   // you have this
            \Schema::hasColumn('deposits', 'amount')          // you do NOT have this yet
        ) {
            $dq = \DB::table('deposits')->where('booking_id', $this->id);

            if (\Schema::hasColumn('deposits', 'status')) {
                $dq->whereIn('status', $this->paidStatuses());
            }

            $sum += (int) $dq->sum('amount');
            if ($sum > 0) {
                return $sum;
            }
        }

        // ---- payments fallback (purpose/type='deposit') ----
        if (\Schema::hasTable('payments')) {
            $pq = \DB::table('payments');

            if (\Schema::hasColumn('payments', 'booking_reference')) {
                $pq->where('booking_reference', $this->reference);
            } elseif (\Schema::hasColumn('payments', 'booking_id')) {
                $pq->where('booking_id', $this->id);
            }

            if (\Schema::hasColumn('payments', 'purpose')) {
                $pq->where('purpose', 'deposit');
            } elseif (\Schema::hasColumn('payments', 'type')) {
                $pq->where('type', 'deposit');
            }

            if (\Schema::hasColumn('payments', 'status')) {
                $pq->whereIn('status', $this->paidStatuses());
            }

            $sum += (int) $pq->sum('amount');
        }

        return $sum;
    }

    public function getDepositPaidSoFarAttribute(): int
    {
        return (int) $this->deposit_paid;
    }

    public function getBalanceDueAttribute(): int
    {
        $total = (int) ($this->total_amount ?? 0);
        $paid  = (int) ($this->amount_paid ?? 0);
        return max($total - $paid, 0);
    }

    public function getDepositDueAttribute(): int
    {
        $required = (int) ($this->deposit_amount ?? 0);
        $paid     = (int) ($this->deposit_paid ?? 0);
        return max($required - $paid, 0);
    }

    // ---------------- Money (formatted) ----------------

    public function getTotalFormattedAttribute(): string
    {
        return $this->formatCents($this->total_amount);
    }

    public function getDepositFormattedAttribute(): string
    {
        return $this->formatCents($this->deposit_amount);
    }

    public function getHoldFormattedAttribute(): string
    {
        return $this->formatCents($this->hold_amount);
    }

    public function getAmountPaidFormattedAttribute(): string
    {
        return $this->formatCents($this->amount_paid);
    }

    public function getDepositPaidFormattedAttribute(): string
    {
        return $this->formatCents($this->deposit_paid);
    }

    public function getDepositPaidSoFarFormattedAttribute(): string
    {
        return $this->formatCents($this->deposit_paid_so_far);
    }

    public function getDepositDueFormattedAttribute(): string
    {
        return $this->formatCents($this->deposit_due);
    }

    public function getBalanceDueFormattedAttribute(): string
    {
        return $this->formatCents($this->balance_due);
    }

    // ---------------- Misc ----------------

    public function getPortalUrlAttribute(): string
    {
        $token = $this->portal_token;
        if (function_exists('route')) {
            try {
                return route('portal.pay', ['token' => $token]);
            } catch (\Throwable $e) { /* fall back */ }
        }
        return url('/portal/' . $token);
    }

    // ---------------- Scopes ----------------

    public function scopeUpcoming(Builder $query): Builder
    {
        return $query->where('start_at', '>=', now())->orderBy('start_at');
    }

    public function scopeActive(Builder $query): Builder
    {
        return $query->where('start_at', '<=', now())->where('end_at', '>=', now());
    }

    /**
     * Bookings missing a deposit amount OR missing customer first+last name.
     */
    public function scopeNeedsAttention(Builder $query): Builder
    {
        return $query->where(function (Builder $q) {
            $q->whereNull('deposit_amount')
              ->orWhere('deposit_amount', 0)
              ->orWhereHas('customer', function (Builder $cq) {
                  $cq->whereNull('first_name')->whereNull('last_name');
              });
        });
    }

    // ---------------- Internals ----------------

    protected function paidStatuses(): array
    {
        return ['succeeded', 'paid', 'captured', 'completed'];
    }

    protected function sumCentsFrom(string $relation, string $column = 'amount', ?array $statuses = null): int
    {
        if (!method_exists($this, $relation)) return 0;

        $rel = $this->{$relation}();

        try {
            // Only add status filter if the related table actually has a status column
            if ($statuses && Schema::hasColumn($rel->getModel()->getTable(), 'status')) {
                $rel = $rel->whereIn('status', $statuses);
            }
        } catch (\Throwable $e) {
            // ignore if table/column missing
        }

        return (int) $rel->sum($column);
    }

    private function formatCents(?int $cents): string
    {
        $cents = (int) ($cents ?? 0);
        return '$' . number_format($cents / 100, 2);
    }
}
